function floodFillTile(id) {
    const element = document.getElementById(id);
  
    if (!element || element.classList.contains('bomb') || element.classList.contains('revealed')) {
      return; // Stop recursion if the tile is a bomb, already revealed, or not found
    }
  
    element.classList.add('revealed'); // Mark the tile as revealed
  
    const row = Math.floor(id / 10); // Extract row number from id
    const col = id % 10; // Extract column number from id
  
    // Define the eight possible directions of adjacent tiles
    const directions = [
      { row: -1, col: -1 }, { row: -1, col: 0 }, { row: -1, col: 1 },
      { row: 0, col: -1 }, /* Current tile */ { row: 0, col: 1 },
      { row: 1, col: -1 }, { row: 1, col: 0 }, { row: 1, col: 1 }
    ];
  
    let bombCount = 0;
  
    for (const direction of directions) {
      const newRow = row + direction.row;
      const newCol = col + direction.col;
      const newId = newRow * 10 + newCol;
  
      const adjacentTile = document.getElementById(newId);
      if (adjacentTile && adjacentTile.classList.contains('bomb')) {
        bombCount++;
      }
    }
  
    if (bombCount === 0) {
      for (const direction of directions) {
        const newRow = row + direction.row;
        const newCol = col + direction.col;
        const newId = newRow * 10 + newCol;
  
        floodFillTile(newId); // Recursively call floodFillTile on neighboring tiles
      }
    }
  
    // Update the image source
    const image = element.querySelector('img');
    image.src = 'assets/img/SVGs/' + bombCount + 's.svg';
  }
  